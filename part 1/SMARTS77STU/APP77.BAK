/********************************************************************/
/* A Small Real Time System for the Real-Time laboratory            */
/* built by: A.Teitelbaum on an idea of H.G.Mendelbaum              */
/* Jerusalem College of Technology, 5759-64 (1999-03)               */
/* update  Tishrey   5777                                           */
/* APP77.CPP, an application to demonstrate SMARTS77  functioning   */
/********************************************************************/
#include "smarts77.h"
static SMARTS;
// user Functions
void a( )
{
	// SMARTS.contextSwitchOff();
	cout << "\n *************   A Start    *********************\n";
	mutex.release();
	// for (int j=0; j <500; j++)
			for (int j=0; j <10; j++)

	{
		for (long i=0; i <600000; i++);
		SMARTS.contextSwitchOff();
		cout << "A";
		SMARTS.contextSwitchOn();
	}
	SMARTS.contextSwitchOff();
	cout << "\n *************   A Finish   *********************\n";
	SMARTS.contextSwitchOn();
}

void b( )
{
	SMARTS.contextSwitchOff();
	cout << "\n *************   B Start    *********************\n";
	SMARTS.contextSwitchOn();
	// for (int j=0; j <500; j++)
			for (int j=0; j <10; j++)

	{
		for (long i=0; i < 600000; i++);
		SMARTS.contextSwitchOff();
		cout << "B";
		SMARTS.contextSwitchOn();
	}
	SMARTS.contextSwitchOff();
	cout << "\n *************   B Finish   *********************\n";
	SMARTS.contextSwitchOn();
}

void c( )
{

	SMARTS.contextSwitchOff();
	cout << "\n *************   C Start    *********************\n";
	SMARTS.contextSwitchOn();
	// for (int j=0; j <500; j++)
		for (int j=0; j <10; j++)
	{
		for (long i=0; i <600000; i++);
		SMARTS.contextSwitchOff();
		cout << "C";
		SMARTS.contextSwitchOn();
	}
	SMARTS.contextSwitchOff();
	cout << "\n *************   C Finish   *********************\n";
	SMARTS.contextSwitchOn();
}

void main( )
{
	clrscr();
		// SMARTS.externalFunctions(timerInterruptHandler, scheduler, myTaskEnd, EDF);
	// SMARTS.externalFunctions(timerInterruptHandler, scheduler, myTaskEnd, roundRobin);
	SMARTS.externalFunctions(timerInterruptHandler, scheduler, myTaskEnd, RMS);
	// working well
	SMARTS.declareTask(a,'A',80,7);
	SMARTS.declareTask(b,'B',70,2);
	SMARTS.declareTask(c,'C',90, 3);
	// not working well
	// SMARTS.declareTask(a,'A',90,3);
	// SMARTS.declareTask(b,'B',90,4);
	// SMARTS.declareTask(c,'C',25,5);
	SMARTS.runTheTasks();
	SMARTS.contextSwitchOff();
	cout << "\n *************   Main   *********************\n";
	SMARTS.contextSwitchOn();
	while(true);
}



